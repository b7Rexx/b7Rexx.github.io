{"version":3,"sources":["component/nav-item.js","component/list-item.js","component/input-component.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","className","this","props","status","onClick","item","React","Component","ListItem","e","target","setAttribute","complete","completedEvent","onKeyDown","editEvent","contentEdit","title","removeEvent","InputComponent","iconLabel","htmlFor","id","label","getLabel","type","placeholder","onKeyUp","defaultValue","App","navEvent","navIndex","setState","nav","state","map","value","index","accumulateList","addListItem","key","max","Math","apply","list","activeNav","completeListItemHandler","itemId","searchListItem","keyword","toLowerCase","populateList","filter","name","includes","searchKeyword","updateVal","innerHTML","removeAttribute","length","editListItem","removeListItemHandler","style","textAlign","padding","fontSize","color","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e34ae69f.chunk.js","sourcesContent":["import React from 'react';\n\nclass NavItem extends React.Component {\n  render() {\n    return (\n      <li\n        className={\"nav-item \" + (this.props.status ? 'active' : '')}\n        onClick={this.props.onClick}>\n        {this.props.item}\n      </li>\n    );\n  }\n}\n\nexport default NavItem;\n","import React from 'react';\n\nclass ListItem extends React.Component {\n\n  contentEdit(e) {\n    e.target.setAttribute('contenteditable', true);\n  }\n\n  render() {\n    return (\n      <li className='list-item'>\n        <a className={'check-todo ' + (this.props.complete ? 'btn-completed' : '')}\n           onClick={this.props.completedEvent}>\n          <i className={'fa ' + (this.props.complete ? 'fa-check-circle' : 'fa-circle')}/>\n        </a>\n        <span className={this.props.complete ? 'completed' : ''}\n              onKeyDown={this.props.editEvent}\n              onClick={(e) => this.contentEdit(e)}>{this.props.item}</span>\n        <a className='remove-todo'\n           title='remove' onClick={this.props.removeEvent}>\n          <i className='fa fa-trash'/>\n        </a>\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import React from 'react';\n\nclass InputComponent extends React.Component {\n\n  getLabel() {\n    if (this.props.iconLabel === true) {\n      return (\n        <label htmlFor={this.props.id}\n               className={this.props.iconLabel ? 'icon-label' : ''}>\n          <i className={this.props.label}/>\n        </label>\n      );\n    } else {\n      return (\n        <label htmlFor={this.props.id}> {this.props.label} </label>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className='input-component'> {this.getLabel()}\n        <input id={this.props.id}\n               type={this.props.type}\n               placeholder={this.props.placeholder}\n               onKeyUp={\n                 (e) => this.props.onKeyUp(e)}\n               defaultValue={this.props.defaultValue}\n        />\n      </div>\n    );\n  }\n}\n\nexport default InputComponent;\n","import React from 'react';\nimport NavItem from './component/nav-item';\nimport ListItem from './component/list-item';\nimport InputComponent from './component/input-component';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeNav: 'all',\n      searchKeyword: '',\n      nav: [\n        {name: 'Todo', status: 0, type: 'incomplete'},\n        {name: 'All', status: 1, type: 'all'},\n        {name: 'Completed', status: 0, type: 'complete'},\n      ],\n      list: props.list || [],\n      populateList: props.list || []\n    };\n  }\n\n  /**\n   * nav button event handler\n   * @param navIndex - index from this.state.nav\n   */\n  navEvent = (navIndex) => {\n    this.setState({\n      nav: this.state.nav.map((value, index) => {\n        if (index === navIndex) {\n          if (value.status !== 1) {\n            value.status = 1;\n          }\n          this.accumulateList(value.type);\n        } else {\n          value.status = 0;\n        }\n        return value;\n      })\n    });\n  };\n\n  /**\n   * accumulate list by tab event\n   * @param type\n   */\n  accumulateList(type = 'all') {\n    switch (type) {\n      case \"complete\":\n        this.setState({\n          activeNav: 'complete',\n          searchKeyword: '',\n          populateList: this.state.list.filter((value) => {\n            return value.complete;\n          })\n        });\n        break;\n      case \"incomplete\":\n        this.setState({\n          activeNav: 'incomplete',\n          searchKeyword: '',\n          populateList: this.state.list.filter((value) => {\n            return !value.complete;\n          })\n        });\n        break;\n      default:\n        this.setState({\n          activeNav: 'all',\n          searchKeyword: '',\n          populateList: this.state.list\n        });\n        break;\n    }\n\n  }\n\n  /**\n   * add list item\n   * @param e\n   */\n  addListItem = (e) => {\n    if (e.target.value && e.key === 'Enter') {\n      let max = Math.max.apply(null,\n        this.state.list.map(function (value) {\n          return value.id;\n        }));\n      this.setState({\n        activeNav: 'incomplete',\n        list: [{\"id\": (max + 1), \"name\": e.target.value, \"complete\": false}, ...this.state.list]\n      }, () => (this.navEvent(0)), e.target.value = '');\n    }\n  };\n\n  /**\n   * edit list item\n   * @param e\n   * @param itemId\n   */\n  editListItem(e, itemId) {\n    if (e.key === 'Enter') {\n      let updateVal = e.target.innerHTML;\n      e.target.removeAttribute('contenteditable');\n      this.setState({\n        list: this.state.list.map((value) => {\n          if (value.id === itemId)\n            value.name = updateVal;\n          return value;\n        })\n      });\n    }\n  }\n\n  /**\n   * remove item from list\n   * @param itemId\n   */\n  removeListItemHandler(itemId) {\n    this.setState({\n      list: this.state.list.filter((value) => {\n        return value.id !== itemId;\n      })\n    }, () => this.accumulateList(this.state.activeNav));\n  }\n\n  /**\n   * check/uncheck complete\n   * @param itemId\n   */\n  completeListItemHandler = (itemId) => {\n    this.setState({\n      list: this.state.list.map((value) => {\n        if (value.id === itemId)\n          value.complete = !value.complete;\n        return value;\n      })\n    }, () => this.accumulateList(this.state.activeNav));\n  };\n\n  /**\n   * search list by name\n   * @param e\n   */\n  searchListItem = (e) => {\n    const keyword = e.target.value.toLowerCase();\n    // if (e.key === 'Enter') {\n    switch (this.state.activeNav) {\n      case \"complete\":\n        this.setState({\n          populateList: this.state.list.filter((item) => {\n            return (item.name).toLowerCase().includes(keyword) && item.complete === true;\n\n          })\n        });\n        break;\n      case \"all\":\n        this.setState({\n          populateList: this.state.list.filter((item) => {\n            return (item.name).toLowerCase().includes(keyword);\n          })\n        });\n        break;\n      default:\n        this.setState({\n          populateList: this.state.list.filter((item) => {\n            return (item.name).toLowerCase().includes(keyword) && item.complete === false;\n\n          })\n        });\n        break;\n      // }\n    }\n  };\n\n  populateList() {\n    if (this.state.populateList.length !== 0) {\n      return this.state.populateList.map((value, index) => (\n        <ListItem key={index}\n                  item={value.name} complete={value.complete}\n                  completedEvent={() => this.completeListItemHandler(value.id)}\n                  editEvent={(e) => this.editListItem(e, value.id)}\n                  removeEvent={() => this.removeListItemHandler(value.id)}/>\n      ));\n    } else {\n      const emptyStyle = {textAlign: 'center', padding: 20, fontSize: 80, color: 'lightgrey'};\n      return (\n        <li style={emptyStyle}>\n          <div style={{fontSize: 20}}>Empty</div>\n          <i className='fa fa-list'/>\n        </li>\n      );\n    }\n  }\n\n  render() {\n    console.log('render');\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <div className=\"header-content\">\n            <div className=\"navbar\">\n              <ul className=\"nav\">\n                {this.state.nav.map((value, index) => (\n                  <NavItem key={index} item={value.name} status={value.status} onClick={() => this.navEvent(index)}/>\n                ))}\n              </ul>\n            </div>\n            <InputComponent label='fa fa-search' iconLabel={true}\n                            type='text' placeholder='Search'\n                            id='searchTodo' onKeyUp={this.searchListItem}\n                            defaultValue={this.state.searchKeyword}/>\n            <InputComponent label='fa fa-plus-circle' iconLabel={true}\n                            type='text' placeholder='Add Todo'\n                            id='addTodo' onKeyUp={this.addListItem}/>\n          </div>\n        </div>\n        <div className=\"main-list\">\n          <ul className='todo-list'>\n            {this.populateList()}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'font-awesome/css/font-awesome.css';\nimport './styles/reset.css';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './styles/style.css';\nimport './styles/media.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport list from './api/list';\n\nReactDOM.render(<App list={list}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}